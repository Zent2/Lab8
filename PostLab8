/*
 * File:   mainc.c
 * Author: Christian Campos 21760
 *
 * Created on 13 de abril de 2023, 6:16 PM
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdio.h>
#include <stdint.h>

#define _XTAL_FREQ 1000000


#include <xc.h>

const char* data= "Hola mundo";
const char* menu= "\n\r--- MENU ---\n\r 1. Leer Potenciometro\n\r 2. Enviar Ascii\n\r Ingrese una opcion: ";
const char* opc1="\n\rValor del potenciometro: \n\r";
const char* opc2="\n\rHola, mundo!\n\r";
const char* opc3= "\n\rOpcion invalida\n\r";
char valor_pot;
char* valor_potd;
char seleccion = 0;
/*void __interrupt() isr(void){
    if (PIR1bits.RCIF){
        PORTB=RCREG;
    }
}*/

void enviar_cadena(char* cadena); // Creación de la función

//La función para enviar la cadena
void enviar_cadena(char* cadena){
    int i = 0;
    while(*(cadena+i) != '\0') { //Mientras no se alcance el final de la cadena
        while(!PIR1bits.TXIF); //Esperar a que el registro de transmisión esté disponible
        TXREG = *(cadena+i); //Enviar el carácter actual
        i++; //Incrementar el índice para apuntar al siguiente carácter
    }
    __delay_ms(100);
    TXREG=32; //Espacio
}


void setup (void);

void main(void) {
    setup();
    while (1) {
         // Mostrar el menú en la hiperterminal
        enviar_cadena(menu);
    __delay_ms(100);
    
    while (!RCIF); // Esperar a que llegue un carácter
        seleccion = RCREG; // Leer el carácter recibido
        
        // Procesar la selección del usuario (cases)
        switch (seleccion) {
            case '1':
                // Leer el valor del potenciómetro y enviarlo por la comunicación serial
                
                ADCON0bits.GO=1;
                
                while (ADIF==0);
                ADCON0bits.CHS= 1;
                __delay_ms(100);
                int adc=(ADRESH<<8)+ADRESL;
                valor_pot= adc>>2;
                PORTD=valor_pot;
                valor_potd=valor_pot*100/255; //Convertir el valor a decimal (porcentaje)
                __delay_ms(100);
                //Conversión de número a texto
                char buffer[10];
                sprintf(buffer, "%d", valor_potd);
                
                
                //printf("\n\rValor del potenciometro: 123\n\r"); // Enviar un valor fijo por la comunicación serial
                enviar_cadena(opc1);
                __delay_ms(100);
                enviar_cadena(buffer);
                TXREG=37;//%
                
                break;
            case '2':
                // Enviar un mensaje ASCII por la comunicación serial
                //printf("\n\rHola, mundo!\n\r");
                //enviar_cadena(opc2);
                if (PIR1bits.TXIF){
                    enviar_cadena(opc2);
                }
                break;
            default:
                // Selección inválida
                //printf("\n\rOpcion invalida\n\r");
                enviar_cadena(opc3);
                break;
        }
    







    
    
    //cadena (data);
    }
    return;
}
void setup (void){
    //Configuración de puertos
    ANSEL=0;
    ANSELH=0;
    
    
    TRISD=0;
    PORTD=0x00;
    
    //Oscilador a 1MHz
    OSCCONbits.IRCF=0b100;
    OSCCONbits.SCS=1;
    
    //Configuracion de TX y RX
    TXSTAbits.SYNC=0;
    TXSTAbits.BRGH=1;
    
    BAUDCTLbits.BRG16=1;
    
    SPBRG=25;
    SPBRGH=0;
    
    RCSTAbits.SPEN=1;
    RCSTAbits.RX9=0;
    RCSTAbits.CREN=1;
    TXSTAbits.TXEN=1;
    
    //Configuracion de interrupciones
    PIR1bits.RCIF=0;
    PIE1bits.RCIE=1;
    INTCONbits.PEIE=1;
    INTCONbits.GIE=1;
    
    //config ADC
    ANSEL=0b10;
    TRISA=0b10;
    ADCON0bits.ADCS=0b10;
    __delay_ms(1);
    ADCON1bits.ADFM=1;
    ADCON1bits.VCFG0=0;
    ADCON1bits.VCFG1=0;
    ADCON0bits.ADON=1;
    ADIF=0;
    
    
} 
